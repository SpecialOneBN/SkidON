name: Release

on:
  push:
    tags:
      - 'v*'

env:
  GO_VERSION: '1.21'

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Generate changelog
        run: |
          # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è changelog –º–µ–∂–¥—É —Ç–µ–≥–∞–º–∏
          echo "## What's Changed" > CHANGELOG.md
          git log --pretty=format:"* %s (%h)" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> CHANGELOG.md

      - name: Build binaries
        run: |
          mkdir -p dist
          
          # Build for different platforms
          SERVICES="api-gateway parser-service product-service user-service notification-service"
          PLATFORMS="linux/amd64 linux/arm64 darwin/amd64 darwin/arm64 windows/amd64"
          
          for service in $SERVICES; do
            for platform in $PLATFORMS; do
              GOOS=${platform%/*}
              GOARCH=${platform#*/}
          
              output_name="dist/${service}-${GOOS}-${GOARCH}"
              if [ $GOOS = "windows" ]; then
                output_name+='.exe'
              fi
          
              echo "Building $service for $platform..."
              cd $service
              env GOOS=$GOOS GOARCH=$GOARCH go build -ldflags="-s -w" -o "../$output_name" ./cmd
              cd ..
            done
          done

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: CHANGELOG.md
          files: dist/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker-release:
    name: Build and Push Release Images
    runs-on: ubuntu-latest
    needs: create-release

    strategy:
      matrix:
        service: [api-gateway, parser-service, product-service, user-service, notification-service]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract tag name
        id: tag
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ github.repository }}/${{ matrix.service }}:${{ steps.tag.outputs.tag }}
            ${{ github.repository }}/${{ matrix.service }}:latest
            ghcr.io/${{ github.repository }}/${{ matrix.service }}:${{ steps.tag.outputs.tag }}
            ghcr.io/${{ github.repository }}/${{ matrix.service }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  helm-release:
    name: Package and Release Helm Chart
    runs-on: ubuntu-latest
    needs: docker-release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'

      - name: Package Helm chart
        run: |
          cd deploy/helm
          helm package . --version ${GITHUB_REF#refs/tags/v}

      - name: Upload Helm chart to release
        uses: softprops/action-gh-release@v1
        with:
          files: deploy/helm/*.tgz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, docker-release, helm-release]
    if: always()

    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#releases'
          text: |
            üöÄ SkidON ${{ github.ref_name }} has been released!
            
            üì¶ Binaries: Available in GitHub Releases
            üê≥ Docker Images: Updated on Docker Hub & GHCR
            ‚õµ Helm Chart: Ready for deployment
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: success()

      - name: Notify Discord
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: 'üéâ SkidON {{ GITHUB_REF_NAME }} released! Check out the new features.'
        if: success()